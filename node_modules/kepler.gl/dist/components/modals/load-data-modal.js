"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadDataModalFactory = LoadDataModalFactory;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodash = _interopRequireDefault(require("lodash.get"));

var _fileUpload = _interopRequireDefault(require("../common/file-uploader/file-upload"));

var _loadStorageMap = _interopRequireDefault(require("./load-storage-map"));

var _modalTabs = _interopRequireDefault(require("./modal-tabs"));

var _loadingDialog = _interopRequireDefault(require("./loading-dialog"));

var _defaultSettings = require("../../constants/default-settings");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n  min-height: 440px;\n  display: flex;\n  flex-direction: column;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

/** @typedef {import('./load-data-modal').LoadDataModalProps} LoadDataModalProps */
var StyledLoadDataModal = _styledComponents["default"].div.attrs({
  className: 'load-data-modal'
})(_templateObject(), function (props) {
  return props.theme.modalPadding;
});

var noop = function noop() {};

var getDefaultMethod = function getDefaultMethod(methods) {
  return Array.isArray(methods) ? (0, _lodash["default"])(methods, [0]) : null;
};

LoadDataModalFactory.deps = [_modalTabs["default"], _fileUpload["default"], _loadStorageMap["default"]];

function LoadDataModalFactory(ModalTabs, FileUpload, LoadStorageMap) {
  /** @type {React.FunctionComponent<LoadDataModalProps>} */
  var LoadDataModal = function LoadDataModal(props) {
    // @ts-ignore TODO check why this is not defined
    var isCloudMapLoading = props.isCloudMapLoading;
    var loadingMethods = props.loadingMethods;

    var _useState = (0, _react.useState)(getDefaultMethod(loadingMethods)),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        currentMethod = _useState2[0],
        toggleMethod = _useState2[1];

    return _react["default"].createElement(StyledLoadDataModal, null, _react["default"].createElement(ModalTabs, {
      currentMethod: currentMethod.id,
      loadingMethods: loadingMethods,
      toggleMethod: toggleMethod
    }), isCloudMapLoading ? _react["default"].createElement(_loadingDialog["default"], {
      size: 64
    }) : currentMethod && _react["default"].createElement(currentMethod.elementType, (0, _extends2["default"])({
      key: currentMethod.id
    }, props)));
  };

  LoadDataModal.defaultProps = {
    onFileUpload: noop,
    fileLoading: false,
    loadingMethods: [{
      id: _defaultSettings.LOADING_METHODS.upload,
      label: 'modal.loadData.upload',
      elementType: FileUpload
    }, {
      id: _defaultSettings.LOADING_METHODS.storage,
      label: 'modal.loadData.storage',
      elementType: LoadStorageMap
    }]
  };
  return LoadDataModal;
}

var _default = LoadDataModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL21vZGFscy9sb2FkLWRhdGEtbW9kYWwuanMiXSwibmFtZXMiOlsiU3R5bGVkTG9hZERhdGFNb2RhbCIsInN0eWxlZCIsImRpdiIsImF0dHJzIiwiY2xhc3NOYW1lIiwicHJvcHMiLCJ0aGVtZSIsIm1vZGFsUGFkZGluZyIsIm5vb3AiLCJnZXREZWZhdWx0TWV0aG9kIiwibWV0aG9kcyIsIkFycmF5IiwiaXNBcnJheSIsIkxvYWREYXRhTW9kYWxGYWN0b3J5IiwiZGVwcyIsIk1vZGFsVGFic0ZhY3RvcnkiLCJGaWxlVXBsb2FkRmFjdG9yeSIsIkxvYWRTdG9yYWdlTWFwRmFjdG9yeSIsIk1vZGFsVGFicyIsIkZpbGVVcGxvYWQiLCJMb2FkU3RvcmFnZU1hcCIsIkxvYWREYXRhTW9kYWwiLCJpc0Nsb3VkTWFwTG9hZGluZyIsImxvYWRpbmdNZXRob2RzIiwiY3VycmVudE1ldGhvZCIsInRvZ2dsZU1ldGhvZCIsImlkIiwiZGVmYXVsdFByb3BzIiwib25GaWxlVXBsb2FkIiwiZmlsZUxvYWRpbmciLCJMT0FESU5HX01FVEhPRFMiLCJ1cGxvYWQiLCJsYWJlbCIsImVsZW1lbnRUeXBlIiwic3RvcmFnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOzs7Ozs7Ozs7Ozs7QUFFQTtBQUVBLElBQU1BLG1CQUFtQixHQUFHQyw2QkFBT0MsR0FBUCxDQUFXQyxLQUFYLENBQWlCO0FBQzNDQyxFQUFBQSxTQUFTLEVBQUU7QUFEZ0MsQ0FBakIsQ0FBSCxvQkFHWixVQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlDLFlBQWhCO0FBQUEsQ0FITyxDQUF6Qjs7QUFTQSxJQUFNQyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxHQUFNLENBQUUsQ0FBckI7O0FBQ0EsSUFBTUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFBQyxPQUFPO0FBQUEsU0FBS0MsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE9BQWQsSUFBeUIsd0JBQUlBLE9BQUosRUFBYSxDQUFDLENBQUQsQ0FBYixDQUF6QixHQUE2QyxJQUFsRDtBQUFBLENBQWhDOztBQUVBRyxvQkFBb0IsQ0FBQ0MsSUFBckIsR0FBNEIsQ0FBQ0MscUJBQUQsRUFBbUJDLHNCQUFuQixFQUFzQ0MsMEJBQXRDLENBQTVCOztBQUVPLFNBQVNKLG9CQUFULENBQThCSyxTQUE5QixFQUF5Q0MsVUFBekMsRUFBcURDLGNBQXJELEVBQXFFO0FBQzFFO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFBaEIsS0FBSyxFQUFJO0FBQzdCO0FBRDZCLFFBRXRCaUIsaUJBRnNCLEdBRURqQixLQUZDLENBRXRCaUIsaUJBRnNCO0FBQUEsUUFHdEJDLGNBSHNCLEdBR0psQixLQUhJLENBR3RCa0IsY0FIc0I7O0FBQUEsb0JBSVMscUJBQVNkLGdCQUFnQixDQUFDYyxjQUFELENBQXpCLENBSlQ7QUFBQTtBQUFBLFFBSXRCQyxhQUpzQjtBQUFBLFFBSVBDLFlBSk87O0FBTTdCLFdBQ0UsZ0NBQUMsbUJBQUQsUUFDRSxnQ0FBQyxTQUFEO0FBQ0UsTUFBQSxhQUFhLEVBQUVELGFBQWEsQ0FBQ0UsRUFEL0I7QUFFRSxNQUFBLGNBQWMsRUFBRUgsY0FGbEI7QUFHRSxNQUFBLFlBQVksRUFBRUU7QUFIaEIsTUFERixFQU1HSCxpQkFBaUIsR0FDaEIsZ0NBQUMseUJBQUQ7QUFBZSxNQUFBLElBQUksRUFBRTtBQUFyQixNQURnQixHQUdoQkUsYUFBYSxJQUFJLGdDQUFDLGFBQUQsQ0FBZSxXQUFmO0FBQTJCLE1BQUEsR0FBRyxFQUFFQSxhQUFhLENBQUNFO0FBQTlDLE9BQXNEckIsS0FBdEQsRUFUckIsQ0FERjtBQWNELEdBcEJEOztBQXNCQWdCLEVBQUFBLGFBQWEsQ0FBQ00sWUFBZCxHQUE2QjtBQUMzQkMsSUFBQUEsWUFBWSxFQUFFcEIsSUFEYTtBQUUzQnFCLElBQUFBLFdBQVcsRUFBRSxLQUZjO0FBRzNCTixJQUFBQSxjQUFjLEVBQUUsQ0FDZDtBQUNFRyxNQUFBQSxFQUFFLEVBQUVJLGlDQUFnQkMsTUFEdEI7QUFFRUMsTUFBQUEsS0FBSyxFQUFFLHVCQUZUO0FBR0VDLE1BQUFBLFdBQVcsRUFBRWQ7QUFIZixLQURjLEVBTWQ7QUFDRU8sTUFBQUEsRUFBRSxFQUFFSSxpQ0FBZ0JJLE9BRHRCO0FBRUVGLE1BQUFBLEtBQUssRUFBRSx3QkFGVDtBQUdFQyxNQUFBQSxXQUFXLEVBQUViO0FBSGYsS0FOYztBQUhXLEdBQTdCO0FBZ0JBLFNBQU9DLGFBQVA7QUFDRDs7ZUFFY1Isb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjAgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC5nZXQnO1xuXG5pbXBvcnQgRmlsZVVwbG9hZEZhY3RvcnkgZnJvbSAnY29tcG9uZW50cy9jb21tb24vZmlsZS11cGxvYWRlci9maWxlLXVwbG9hZCc7XG5pbXBvcnQgTG9hZFN0b3JhZ2VNYXBGYWN0b3J5IGZyb20gJy4vbG9hZC1zdG9yYWdlLW1hcCc7XG5pbXBvcnQgTW9kYWxUYWJzRmFjdG9yeSBmcm9tICcuL21vZGFsLXRhYnMnO1xuXG5pbXBvcnQgTG9hZGluZ0RpYWxvZyBmcm9tICcuL2xvYWRpbmctZGlhbG9nJztcblxuaW1wb3J0IHtMT0FESU5HX01FVEhPRFN9IGZyb20gJ2NvbnN0YW50cy9kZWZhdWx0LXNldHRpbmdzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vbG9hZC1kYXRhLW1vZGFsJykuTG9hZERhdGFNb2RhbFByb3BzfSBMb2FkRGF0YU1vZGFsUHJvcHMgKi9cblxuY29uc3QgU3R5bGVkTG9hZERhdGFNb2RhbCA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdsb2FkLWRhdGEtbW9kYWwnXG59KWBcbiAgcGFkZGluZzogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5tb2RhbFBhZGRpbmd9O1xuICBtaW4taGVpZ2h0OiA0NDBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmA7XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcbmNvbnN0IGdldERlZmF1bHRNZXRob2QgPSBtZXRob2RzID0+IChBcnJheS5pc0FycmF5KG1ldGhvZHMpID8gZ2V0KG1ldGhvZHMsIFswXSkgOiBudWxsKTtcblxuTG9hZERhdGFNb2RhbEZhY3RvcnkuZGVwcyA9IFtNb2RhbFRhYnNGYWN0b3J5LCBGaWxlVXBsb2FkRmFjdG9yeSwgTG9hZFN0b3JhZ2VNYXBGYWN0b3J5XTtcblxuZXhwb3J0IGZ1bmN0aW9uIExvYWREYXRhTW9kYWxGYWN0b3J5KE1vZGFsVGFicywgRmlsZVVwbG9hZCwgTG9hZFN0b3JhZ2VNYXApIHtcbiAgLyoqIEB0eXBlIHtSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxMb2FkRGF0YU1vZGFsUHJvcHM+fSAqL1xuICBjb25zdCBMb2FkRGF0YU1vZGFsID0gcHJvcHMgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmUgVE9ETyBjaGVjayB3aHkgdGhpcyBpcyBub3QgZGVmaW5lZFxuICAgIGNvbnN0IHtpc0Nsb3VkTWFwTG9hZGluZ30gPSBwcm9wcztcbiAgICBjb25zdCB7bG9hZGluZ01ldGhvZHN9ID0gcHJvcHM7XG4gICAgY29uc3QgW2N1cnJlbnRNZXRob2QsIHRvZ2dsZU1ldGhvZF0gPSB1c2VTdGF0ZShnZXREZWZhdWx0TWV0aG9kKGxvYWRpbmdNZXRob2RzKSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZExvYWREYXRhTW9kYWw+XG4gICAgICAgIDxNb2RhbFRhYnNcbiAgICAgICAgICBjdXJyZW50TWV0aG9kPXtjdXJyZW50TWV0aG9kLmlkfVxuICAgICAgICAgIGxvYWRpbmdNZXRob2RzPXtsb2FkaW5nTWV0aG9kc31cbiAgICAgICAgICB0b2dnbGVNZXRob2Q9e3RvZ2dsZU1ldGhvZH1cbiAgICAgICAgLz5cbiAgICAgICAge2lzQ2xvdWRNYXBMb2FkaW5nID8gKFxuICAgICAgICAgIDxMb2FkaW5nRGlhbG9nIHNpemU9ezY0fSAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIGN1cnJlbnRNZXRob2QgJiYgPGN1cnJlbnRNZXRob2QuZWxlbWVudFR5cGUga2V5PXtjdXJyZW50TWV0aG9kLmlkfSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICl9XG4gICAgICA8L1N0eWxlZExvYWREYXRhTW9kYWw+XG4gICAgKTtcbiAgfTtcblxuICBMb2FkRGF0YU1vZGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBvbkZpbGVVcGxvYWQ6IG5vb3AsXG4gICAgZmlsZUxvYWRpbmc6IGZhbHNlLFxuICAgIGxvYWRpbmdNZXRob2RzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiBMT0FESU5HX01FVEhPRFMudXBsb2FkLFxuICAgICAgICBsYWJlbDogJ21vZGFsLmxvYWREYXRhLnVwbG9hZCcsXG4gICAgICAgIGVsZW1lbnRUeXBlOiBGaWxlVXBsb2FkXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogTE9BRElOR19NRVRIT0RTLnN0b3JhZ2UsXG4gICAgICAgIGxhYmVsOiAnbW9kYWwubG9hZERhdGEuc3RvcmFnZScsXG4gICAgICAgIGVsZW1lbnRUeXBlOiBMb2FkU3RvcmFnZU1hcFxuICAgICAgfVxuICAgIF1cbiAgfTtcbiAgcmV0dXJuIExvYWREYXRhTW9kYWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvYWREYXRhTW9kYWxGYWN0b3J5O1xuIl19