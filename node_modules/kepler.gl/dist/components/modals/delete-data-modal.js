"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DeleteDatasetModal = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _datasetLabel = _interopRequireDefault(require("../common/dataset-label"));

var _reactIntl = require("react-intl");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 24px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledMsg = _styledComponents["default"].div(_templateObject());

var DeleteDatasetModal = function DeleteDatasetModal(_ref) {
  var dataset = _ref.dataset,
      _ref$layers = _ref.layers,
      layers = _ref$layers === void 0 ? [] : _ref$layers;
  // retrieve only layers related to the current dataset
  var currDatasetLayers = layers.filter(function (layer) {
    return layer.config.dataId === (dataset && dataset.id);
  });
  return _react["default"].createElement("div", {
    className: "delete-dataset-modal"
  }, _react["default"].createElement(_datasetLabel["default"], {
    dataset: dataset
  }), _react["default"].createElement(StyledMsg, {
    className: "delete-dataset-msg"
  }, _react["default"].createElement(_reactIntl.FormattedMessage, {
    id: 'modal.deleteData.warning',
    values: {
      length: currDatasetLayers.length
    }
  })));
};

exports.DeleteDatasetModal = DeleteDatasetModal;

var DeleteDatasetModalFactory = function DeleteDatasetModalFactory() {
  return DeleteDatasetModal;
};

var _default = DeleteDatasetModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL21vZGFscy9kZWxldGUtZGF0YS1tb2RhbC5qcyJdLCJuYW1lcyI6WyJTdHlsZWRNc2ciLCJzdHlsZWQiLCJkaXYiLCJEZWxldGVEYXRhc2V0TW9kYWwiLCJkYXRhc2V0IiwibGF5ZXJzIiwiY3VyckRhdGFzZXRMYXllcnMiLCJmaWx0ZXIiLCJsYXllciIsImNvbmZpZyIsImRhdGFJZCIsImlkIiwibGVuZ3RoIiwiRGVsZXRlRGF0YXNldE1vZGFsRmFjdG9yeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsNkJBQU9DLEdBQVYsbUJBQWY7O0FBSU8sSUFBTUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixPQUE0QjtBQUFBLE1BQTFCQyxPQUEwQixRQUExQkEsT0FBMEI7QUFBQSx5QkFBakJDLE1BQWlCO0FBQUEsTUFBakJBLE1BQWlCLDRCQUFSLEVBQVE7QUFDNUQ7QUFDQSxNQUFNQyxpQkFBaUIsR0FBR0QsTUFBTSxDQUFDRSxNQUFQLENBQWMsVUFBQUMsS0FBSztBQUFBLFdBQUlBLEtBQUssQ0FBQ0MsTUFBTixDQUFhQyxNQUFiLE1BQXlCTixPQUFPLElBQUlBLE9BQU8sQ0FBQ08sRUFBNUMsQ0FBSjtBQUFBLEdBQW5CLENBQTFCO0FBRUEsU0FDRTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsS0FDRSxnQ0FBQyx3QkFBRDtBQUFjLElBQUEsT0FBTyxFQUFFUDtBQUF2QixJQURGLEVBRUUsZ0NBQUMsU0FBRDtBQUFXLElBQUEsU0FBUyxFQUFDO0FBQXJCLEtBQ0UsZ0NBQUMsMkJBQUQ7QUFDRSxJQUFBLEVBQUUsRUFBRSwwQkFETjtBQUVFLElBQUEsTUFBTSxFQUFFO0FBQUNRLE1BQUFBLE1BQU0sRUFBRU4saUJBQWlCLENBQUNNO0FBQTNCO0FBRlYsSUFERixDQUZGLENBREY7QUFXRCxDQWZNOzs7O0FBaUJQLElBQU1DLHlCQUF5QixHQUFHLFNBQTVCQSx5QkFBNEI7QUFBQSxTQUFNVixrQkFBTjtBQUFBLENBQWxDOztlQUNlVSx5QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBEYXRhc2V0TGFiZWwgZnJvbSAnY29tcG9uZW50cy9jb21tb24vZGF0YXNldC1sYWJlbCc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ3JlYWN0LWludGwnO1xuXG5jb25zdCBTdHlsZWRNc2cgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAyNHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IERlbGV0ZURhdGFzZXRNb2RhbCA9ICh7ZGF0YXNldCwgbGF5ZXJzID0gW119KSA9PiB7XG4gIC8vIHJldHJpZXZlIG9ubHkgbGF5ZXJzIHJlbGF0ZWQgdG8gdGhlIGN1cnJlbnQgZGF0YXNldFxuICBjb25zdCBjdXJyRGF0YXNldExheWVycyA9IGxheWVycy5maWx0ZXIobGF5ZXIgPT4gbGF5ZXIuY29uZmlnLmRhdGFJZCA9PT0gKGRhdGFzZXQgJiYgZGF0YXNldC5pZCkpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJkZWxldGUtZGF0YXNldC1tb2RhbFwiPlxuICAgICAgPERhdGFzZXRMYWJlbCBkYXRhc2V0PXtkYXRhc2V0fSAvPlxuICAgICAgPFN0eWxlZE1zZyBjbGFzc05hbWU9XCJkZWxldGUtZGF0YXNldC1tc2dcIj5cbiAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2VcbiAgICAgICAgICBpZD17J21vZGFsLmRlbGV0ZURhdGEud2FybmluZyd9XG4gICAgICAgICAgdmFsdWVzPXt7bGVuZ3RoOiBjdXJyRGF0YXNldExheWVycy5sZW5ndGh9fVxuICAgICAgICAvPlxuICAgICAgPC9TdHlsZWRNc2c+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBEZWxldGVEYXRhc2V0TW9kYWxGYWN0b3J5ID0gKCkgPT4gRGVsZXRlRGF0YXNldE1vZGFsO1xuZXhwb3J0IGRlZmF1bHQgRGVsZXRlRGF0YXNldE1vZGFsRmFjdG9yeTtcbiJdfQ==